stages:
  - build
  - docker_build
  - publish


variables:
  NUGET_REGISTRY_URL: "https://umane.emeal.nttdata.com/git/api/v4/projects/34206/packages/nuget/index.json"
  NUGET_AUTH_TOKEN: "$GITLAB_TOKEN"
  NUGET_PACKAGES: "$CI_PROJECT_DIR/.nuget/packages"
  DOTNET_VERSION: latest
  REGISTRY_SOURCE: "acrcloudliquid.azurecr.io"
  DOCKER_IMAGE: "$REGISTRY_SOURCE/cloudliquid"
  AZURE_CONTAINER_REGISTRY_USERNAME: "$ACR_USERNAME"
  AZURE_CONTAINER_REGISTRY_PASSWORD: "$ACR_PASSWORD"
  DOCKER_DRIVER: overlay2


#cache:
#  paths:
#    - .nuget/packages/


#restore:
#  stage: restore
#  image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
#  script:
#    - dotnet nuget add source "$NUGET_REGISTRY_URL" -n gitlab -u $GITLAB_USERNAME -p $NUGET_AUTH_TOKEN --store-password-in-clear-text
#    - dotnet restore


build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
  script:
    - dotnet nuget add source "$NUGET_REGISTRY_URL" -n gitlab -u $GITLAB_USERNAME -p $NUGET_AUTH_TOKEN --store-password-in-clear-text
    - dotnet restore
    - dotnet build --configuration Release --no-restore
  artifacts:
    paths:
      - bin/
      - obj/


docker_build:
  stage: docker_build
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: dockerhost
  variables:
    DOCKER_HOST: tcp://dockerhost:2375/
#    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - until docker info; do sleep 1; done
  script:
    - echo "start building docker image"
    - docker build -f Dockerfile -t $DOCKER_IMAGE:latest -t $DOCKER_IMAGE:${CI_PIPELINE_ID} .
    - ls -la
    - echo "image created successfully"
  dependencies:
    - build
  artifacts:
    paths:
      - docker_image/
    expire_in: 1 hour 
  

publish:
  stage: publish
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: dockerhost
  variables:
    DOCKER_HOST: tcp://dockerhost:2375/
#    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "docker registry login"
    - echo "$AZURE_CONTAINER_REGISTRY_PASSWORD" | docker login $REGISTRY_SOURCE --username $AZURE_CONTAINER_REGISTRY_USERNAME --password-stdin
    - echo "pushing image to registry"
    - ls -la
    - docker push $DOCKER_IMAGE:latest
    - docker push $DOCKER_IMAGE:$CI_PIPELINE_ID
    - echo "image successfully pushed to registry"
  when: manual
  dependencies:
    - docker_build